CC = g++ -std=c++17
INCDIR = include
SRCDIR = src
OBJDIR = obj
CFLAG = -c -I$(INCDIR)

SRCS := $(wildcard $(SRCDIR)/*.cpp) main.cpp
OBJS := $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SRCS))

main.x: $(OBJS)
	$(CC) -o $@ $^

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(CFLAG) -o $@ $<

clean:
	rm -rf $(OBJDIR)/*.o *.x

# general make file per un progetto fatto cosÃ¬:
# cartella include con gli header
# cartella src per i codici sorgente
# cartella obj vuota all'inizio per metterci i codici oggetto
# main.cpp fuori da tutto





#In the updated makefile, the main.o object file is not generated explicitly. Instead, it is included in the list of source files for the main.x target.

#Specifically, the main.x target depends on all object files, including main.o. The makefile generates main.o implicitly when it compiles main.cpp as part of the main.x target.

#You can see the main.o file being generated during the compilation process if you add the -v option to the make command:


#make -v
#This will print the verbose output of the make process, including the commands that are executed to build the targets. You should be able to see the g++ command that compiles main.cpp and generates main.o.

#Alternatively, you can use the ls command to check if the main.o file exists in the current directory:


#ls main.o
#If main.o exists, then it was generated by the makefile during the compilation process.